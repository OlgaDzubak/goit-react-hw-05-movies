{"version":3,"file":"static/js/276.dd23766d.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/CastList/cast.module.css?a933","webpack://goit-react-hw-05-movies/./src/components/CastItem/castItem.module.css?38a8","components/CastItem/CastItem.jsx","components/CastList/Cast.jsx","hooks/useFetchMovieCast.jsx","components/Loader/Loader.jsx","service/movie-service.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"ulCast\":\"cast_ulCast__m9iJC\"};","// extracted by mini-css-extract-plugin\nexport default {\"castImg_div\":\"castItem_castImg_div__yGDPA\",\"castImg\":\"castItem_castImg__S9iSf\",\"noPhoto_p\":\"castItem_noPhoto_p__NEOzx\",\"actorNameTitle\":\"castItem_actorNameTitle__EDrOR\",\"character\":\"castItem_character__KuGjo\"};","import css from './castItem.module.css';\n\nexport const CastItem = ({photo, actorName='Unknown actor', character='Unknown'}) => {\n\n    return (\n        <li>\n            <div className={css.castImg_div}>\n                { photo \n                    ? <img src={'https://image.tmdb.org/t/p/w500'+ photo} alt={actorName} className={css.castImg}></img> \n                    : <p className={css.noPhoto_p}>There are no photo of {actorName}</p>\n                }\n            </div>\n            <p className={css.actorNameTitle}>{actorName ? actorName : 'Unknown actor'}</p>\n            <p className={css.character}>Character : <span>{character ? character : 'Unknown'}</span></p>\n        </li>\n    );\n}","import css from './cast.module.css';\nimport { useFetchMovieCast } from '../../hooks/useFetchMovieCast';\nimport { CastItem } from '../CastItem/CastItem';\nimport { Loader } from '../Loader/Loader';\nimport { nanoid } from 'nanoid';\n\n//=================================================================================================================\nconst Cast = () => {\n\n    const { movieCast, isLoading, error} = useFetchMovieCast();\n    \n    return (\n        <div>\n\n            <ul className={css.ulCast}>\n                { movieCast.map((item) => <CastItem photo={item.profile_path} actorName={item.name} character={item.character} key={nanoid()}/>) }\n            </ul> \n\n            { isLoading && <Loader/> }\n            { error && <p>{error}</p> }\n\n        </div>\n    )\n}\n\nexport default Cast;\n//=================================================================================================================","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from '../service/movie-service';\n\nexport const useFetchMovieCast=() => {\n\n    const [movieCast, setMovieCast] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const {movieId: id} = useParams();\n\n    useEffect(()=>{\n\n          setIsLoading(true);\n\n          const fetchData = async () => {\n            try {   \n                    const result = await fetchMovieCast(id);\n                    if (result.length === 0) {setError(\"We don't have any cast list for this movie.\");}\n                    setMovieCast(result);\n                }\n            catch (error) { setError(error); } \n            finally { setIsLoading(false); }\n          }\n          fetchData();\n\n    }, [id])\n    \n    return {\n      movieCast,\n      isLoading,\n      error,\n    }\n}","import {ColorRing} from \"react-loader-spinner\";\n\n\n//=======================================================================================================================\n\nexport const Loader = () => { \n    return <ColorRing  colors={['#34659D', '#34659D', '#34659D', '#51E5FF', '#429EA6']} /> \n} \n\nexport default Loader;\n//=======================================================================================================================","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.headers = {\n  accept: 'application/json',\n  Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiY2VjMjUzMmU5NmU2NDg0MjM3MGY5MmIxMTU2MGI5OSIsInN1YiI6IjY0OWVlNjVkMDkxZTYyMDEwYzExYTc1YSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.INMvJ5-VALOPV-eJTE5a1aj3iJDUP-1HRPAGZ7gUOkg',\n}\naxios.defaults.params={\n  language: 'en-US',\n}\n\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get('/trending/movie/day');\n  return data.results;\n};\n\nexport const searchMovie = async (filter) => {\n  axios.defaults.params = {query: filter, include_adult: 'false', page: '1'};\n  const { data } = await axios.get(`/search/movie`);\n\n  return data.results;\n};\n\nexport const fetchMovieDetails = async (movie_id) => {\n  const { data } = await axios.get(`/movie/${movie_id}`);\n\n  return data;\n};\n\nexport const fetchMovieCast = async (movie_id) => {\n  const { data } = await axios.get(`/movie/${movie_id}/credits`);\n  \n  return data.cast;\n};\n\nexport const fetchMovieReviews = async (movie_id) => {\n  axios.defaults.params = {page: '1'};\n  const { data } = await axios.get(`/movie/${movie_id}/reviews`);\n  \n  return data.results;\n};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["CastItem","photo","actorName","character","className","css","src","alt","useState","movieCast","setMovieCast","isLoading","setIsLoading","error","setError","id","useParams","movieId","useEffect","fetchData","fetchMovieCast","result","length","useFetchMovieCast","map","item","profile_path","name","nanoid","Loader","colors","axios","accept","Authorization","language","getTrendingMovies","data","results","searchMovie","filter","query","include_adult","page","fetchMovieDetails","movie_id","cast","fetchMovieReviews","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}